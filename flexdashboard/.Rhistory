install.packages("ggplot2")
install.packages("caret")
library(caret)
head(diamonds, 10)
diamonds %>%
ggplot(aes(x=price, y=..density..))+
geom_density()+
theme_minimal()+
title("price")+
xlab("Precion en $")+
ylab("Densidad")
library(dyplr)
library(ggplot2)
library(dplyr)
diamonds %>%
ggplot(aes(x=price, y=..density..))+
geom_density()+
theme_minimal()+
title("price")+
xlab("Precion en $")+
ylab("Densidad")
```{r}
library(caret)
library(ggplot2)
library(dplyr)
head(diamonds, 10)
diamonds %>%
ggplot(aes(x=price, y=..density..))+
geom_density()+
theme_minimal()+
title("price")+
xlab("Precion en $")+
ylab("Densidad")
diamonds %>%
ggplot(aes(x=price, y=..density..))+
geom_density()+
theme_minimal()+
title("price")+
xlab("Precion en $")+
ylab("Densidad")
diamonds %>%
ggplot(aes(x=price, y=..density..))+
geom_density()+
theme_minimal()+
ggtitle("price")+
xlab("Precion en $")+
ylab("Densidad")
diamonds %>%
ggplot(aes(x=price, y=..density..))+
geom_density(color="blue")+
theme_minimal()+
ggtitle("price")+
xlab("Precion en $")+
ylab("Densidad")
diamonds %>%
ggplot(aes(x=price, y=..density..))+
geom_density(color="blue", lwd=2)+
theme_minimal()+
ggtitle("price")+
xlab("Precion en $")+
ylab("Densidad")
diamonds %>%
ggplot(aes(x=price, y=..density..))+
geom_density(color="blue", lwd=1)+
theme_minimal()+
ggtitle("price")+
xlab("Precion en $")+
ylab("Densidad")
diamons %>%
filter(color=='D', cut=='Good') %>%
ggplot(aes(x=carat, y=price))+
geom_point()
diamonds %>%
filter(color=='D', cut=='Good') %>%
ggplot(aes(x=carat, y=price))+
geom_point()
diamonds %>%
filter(color=='D', cut=='Good') %>%
ggplot(aes(x=carat, y=price, color=Clarity))+
geom_point()
diamonds %>%
filter(color=='D', cut=='Good') %>%
ggplot(aes(x=carat, y=price, color=clarity))+
geom_point()
diamonds %>%
filter(color=='D', cut=='Good') %>%
ggplot(aes(x=carat, y=price, color=clarity, shape=cut))+
geom_point()
diamonds %>%
ggplot(aes(x=carat, y=price, color=clarity, shape=cut))+
geom_point()
diamonds %>%
ggplot(aes(x=carat, y=price, color=clarity, shape=cut))+
geom_point()
install.packages("ISLR")
library(ISLR)
Default
Default %>%
ggplot(aes(x=balance, y=income, color=default))+
geom_point(())
Default %>%
ggplot(aes(x=balance, y=income, color=default))+
geom_point()
Default %>%
ggplot(aes(x=balance, y=income, color=default))+
geom_point()+
theme_minimal()
Default %>%
ggplot(aes(x=balance, y=income, color=default))+
geom_point()+
theme_minimal()
Default %>%
ggplot(aes(x=default, y=income))+
geom_boxplot()
Default %>%
ggplot(aes(x=default, y=income))+
geom_boxplot() +
theme_minimal()
Default %>%
filter(balance != 0) %>%
ggplot(aes(x=balance, y=..density.., fill=default)) +
geom_density(alpha=0.5) +
theme_minimal()
diamonds %>%
filter(balance != 0) %>%
ggplot(aes(x=price, y=..density.., fill=cut)) +
geom_density(alpha=0.5) +
theme_minimal()
diamonds %>%
ggplot(aes(x=price, y=..density.., fill=cut)) +
geom_density(alpha=0.5) +
theme_minimal()
info <- list()
for(producto in productos){
info[producto] <- data %>%
filter(id_producto==producto)
}
library(dplyr)
data <- read.csv("dataOut.csv")
productos <- unique(data$id_producto)
info <- list()
for(producto in productos){
info[producto] <- data %>%
filter(id_producto==producto)
}
for(producto in productos){
info <- c(info)
info[producto] <- 'd'
}
info <- list()
for(producto in productos){
info[producto] <- 'd'
}
info <- list()
for(producto in productos){
info[producto] <- 'd'
}
# Cant de observaciones por producto
data %>%
select(id_producto) %>%
group_by(id_producto) %>%
summarise(cant=n())
data %>% filter(id_producto='0020d6cc57219cc1874e0c319ecacbf7')
data %>% filter(id_producto=='0020d6cc57219cc1874e0c319ecacbf7')
for(producto in productos){
info[producto] <- data %>% filter(id_producto==producto)
}
for(producto in productos){
info[producto] <- data.frame(data %>% filter(id_producto==producto))
}
for(producto in productos){
info[producto] <- data.frame(data %>% filter(id_producto==producto))
}
View(info)
View(info)
info <- array()
for(producto in productos){
info[producto] <- data.frame(data %>% filter(id_producto==producto))
}
test <- array()
test$qwer <- data.frame()
View(test)
info <- array()
for(producto in productos){
info$producto <- data.frame(data %>% filter(id_producto==producto))
}
View(data)
View(info)
info <- array()
for(producto in productos){
info[producto] <- data.frame(data %>% filter(id_producto==producto))
}
info <- array()
for(producto in productos){
info[[producto]] <- data.frame(data %>% filter(id_producto==producto))
}
info <- array()
for(producto in productos){
info[[producto]] <- data %>% filter(id_producto==producto)
}
info <- vector()
for(producto in productos){
info[[producto]] <- data %>% filter(id_producto==producto)
}
install.packages("dict")
library(dict)
install.packages("Dict")
library(dict)
library(Dict)
test <- dict()
test <- Dict()
install.packages("hash")
library(hash)
test <- hash()
test[['prueba']] <- 3
test
test[['prueb2']]< - 6
test
test[['prueb2']] <- 6
test
info <- hash()
for(producto in productos){
info[[producto]] <- data %>% filter(id_producto==producto)
}
info
info[["0020d6cc57219cc1874e0c319ecacbf7"]]
# Funcion general para crear modelo
arima_generator <- function(data){
auto.arima(ts(data$produccion))
}
info[0]
arima_generator(info[["0020d6cc57219cc1874e0c319ecacbf7"]])
library(forecast)
# Funcion general para crear modelo
arima_generator <- function(data){
auto.arima(ts(data$produccion))
}
# Funcion general para crear modelo
arima_generator <- function(data){
return(auto.arima(ts(data$produccion)))
}
arima_generator(info[["0020d6cc57219cc1874e0c319ecacbf7"]])
info <- hash()
for(producto in productos){
info[[producto]][['data']] <- data %>% filter(id_producto==producto)
}
info[["0020d6cc57219cc1874e0c319ecacbf7"]]
info[["0020d6cc57219cc1874e0c319ecacbf7"]]$data
info <- hash()
for(producto in productos){
info[[producto]][['data']] <- data %>% filter(id_producto==producto)
info[[producto]][['model']] <- arima_generator(info[[producto]][['data']])
}
info[["0020d6cc57219cc1874e0c319ecacbf7"]]$data
info[["0020d6cc57219cc1874e0c319ecacbf7"]]$model
for(producto in productos){
info[[producto]][['predictions']] <- forecast(info[[producto]][['model']], h=length(info[[producto]][['data']])/2)
}
info[["0020d6cc57219cc1874e0c319ecacbf7"]]$predictions
library(dplyr)
library(dplyr)
library(forecast)
library(hash)
data <- read.csv("dataOut.csv")
head(data)
# Cant Productos
data %>%
distinct(id_producto) %>%
summarise(cant=n())
# Cant de observaciones por producto
data %>%
select(id_producto) %>%
group_by(id_producto) %>%
summarise(cant=n())
data %>% filter(id_producto=='0020d6cc57219cc1874e0c319ecacbf7')
# cant de fechas
data %>%
select(timestamp) %>%
group_by(timestamp)
# Funcion general para crear modelo
arima_generator <- function(data){
return(auto.arima(ts(data$produccion)))
}
test <- hash()
productos <- unique(data$id_producto)
info <- hash()
for(producto in productos){
info[[producto]][['data']] <- data %>% filter(id_producto==producto)
info[[producto]][['model']] <- arima_generator(info[[producto]][['data']])
}
4. Genere las predicciones para cada caso el cual sea la mitad de la ventana
de data actual es decir 16 ciclos (meses) hacia delante.
info <- hash()
for(producto in productos){
info[[producto]][['data']] <- data %>% filter(id_producto==producto)
info[[producto]][['model']] <- arima_generator(info[[producto]][['data']])
}
info[["0020d6cc57219cc1874e0c319ecacbf7"]]$model
for(producto in productos){
info[[producto]][['predictions']] <- forecast(info[[producto]][['model']], h=length(info[[producto]][['data']])/2)
}
info[["0020d6cc57219cc1874e0c319ecacbf7"]]$predictions
for(producto in productos){
info[[producto]][['predictions']] <- forecast(info[[producto]][['model']], h=10)
}
info[["0020d6cc57219cc1874e0c319ecacbf7"]]$predictions
info[["0020d6cc57219cc1874e0c319ecacbf7"]]$data
for(producto in productos){
info[[producto]][['predictions']] <- forecast(info[[producto]][['model']], h=42)
}
info[["0020d6cc57219cc1874e0c319ecacbf7"]]$data
info[["0020d6cc57219cc1874e0c319ecacbf7"]]$predictions
for(producto in productos){
info[[producto]][['predictions']] <- forecast(info[[producto]][['model']], level=95)
}
info[["0020d6cc57219cc1874e0c319ecacbf7"]]$predictions
info[[producto]][['predictions']] <- forecast(info[[producto]][['model']], 42, level=95)
for(producto in productos){
info[[producto]][['predictions']] <- forecast(info[[producto]][['model']], 42, level=95)
}
info[["0020d6cc57219cc1874e0c319ecacbf7"]]$predictions
plot(info[["0020d6cc57219cc1874e0c319ecacbf7"]]$predictions)
for(producto in productos){
info[[producto]][['predictions']] <- forecast(info[[producto]][['model']], 5, level=95)
}
info[["0020d6cc57219cc1874e0c319ecacbf7"]]$predictions
plot(info[["0020d6cc57219cc1874e0c319ecacbf7"]]$predictions)
info[[producto]][['predictions']] <- forecast(info[[producto]][['model']], 32, level=95)
for(producto in productos){
info[[producto]][['predictions']] <- forecast(info[[producto]][['model']], 32, level=95)
}
plot(info[["0020d6cc57219cc1874e0c319ecacbf7"]]$predictions)
data$produccion
# Funcion general para crear modelo
arima_generator <- function(data){
return(auto.arima(ts(data$produccion)))
}
for(producto in productos){
info[[producto]][['data']] <- data %>% filter(id_producto==producto)
print(info[[producto]][['data']])
info[[producto]][['model']] <- arima_generator(info[[producto]][['data']])
}
for(producto in productos){
plot(info[[producto]]$predictions)
}
setwd("~/Maestria/trimestre4/Product Development")
setwd("~/Maestria/trimestre4/Product Development")
head(mtcars)
x <- sample(letters, replace = TRUE, size=10)
print(x)
plot(cars)
library(reticulate)
reticulate::repl_python()
x = 42 * 2
print(x)
quit
use_condaenv(r-reticulate)
use_condaenv("r-reticulate")
`conda_install("r-reticulate", "pandas")
reticulate::repl_python()
import pandas
iris_pandas = pandas.read_csv("iris.txt)
iris_setosa = iris_pandas[iris_pandas['species] == "setosa]
iris_setosa.head()
quit
reticulate::repl_python()
import pandas
iris_pandas = pandas.read_csv("iris.txt)
iris_setosa = iris_pandas[iris_pandas['species] == "setosa]
iris_setosa.head()
quit
reticulate::repl_python()
import pandas
iris_pandas = pandas.read_csv("iris.txt)
iris_setosa = iris_pandas[iris_pandas['species] == "setosa"]
iris_setosa.head()
quit
reticulate::repl_python()
import pandas
iris_pandas = pandas.read_csv("iris.txt)
iris_setosa = iris_pandas[iris_pandas['species'] == "setosa"]
iris_setosa.head()
quit
reticulate::repl_python()
import pandas
iris_pandas = pandas.read_csv("iris.txt")
iris_setosa = iris_pandas[iris_pandas['species'] == "setosa"]
iris_setosa.head()
quit
install.packages("flexdashboard")
setwd("~/Maestria/trimestre4/Product Development/flexdashboard")
library(flexdashboard)
library(ggplot2)
install.packages("ggplot2")
library(flexdashboard)
library(ggplot2)
library(dplyr)
install.packages("dplyr")
library(flexdashboard)
library(ggplot2)
library(dplyr)
knitr::kable(iris)
install.packages("leaflet")
install.packages("DT")
install.packages("readr")
library(flexdashboard)
library(readr)
library(dplyr)
library(leaflet)
library(DT)
setwd("~/Maestria/trimestre4/Product Development/flexdashboard/data")
setwd("~/Maestria/trimestre4/Product Development/flexdashboard")
earthquake <- read_csv("data/earthquakedata.csv")
earthquake <- read_csv("data/earthquakedata.csv")
max(earthquake)
setwd("~/Maestria/trimestre4/Product Development/flexdashboard")
library(flexdashboard)
library(readr)
library(dplyr)
library(ggplot2)
vides <- read_csv("data/academatica_videos.csv")
metadata <- read_csv("data/academatica_videos_metada.csv")
setwd("~/Maestria/trimestre4/Product Development/flexdashboard")
vides <- read_csv("data/academatica_videos.csv")
metadata <- read_csv("data/academatica_videos_metada.csv")
vides <- read_csv("data/academatica_videos.csv")
metadata <- read_csv("data/academatica_videos_metadata.csv")
stats <- read_csv("data/academatica_video_stats.csv")
vides <- read_csv("data/academatica_videos.csv")
metadata <- read_csv("data/academatica_videos_metadata.csv")
stats <- read_csv("data/academatica_video_stats.csv")
metricas <- stats %>%
summarise(total_views = sum(viewCount),
total_likes = sum(likeCount),
total_dislikes = sum(dislikeCount),
total_favorite = sum(favoriteCount),
total_comment = sum(commentCount)
)
install.packages("formattable")
library(flexdashboard)
library(readr)
library(dplyr)
library(ggplot2)
library(formattable)
